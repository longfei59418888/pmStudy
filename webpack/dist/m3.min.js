(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["m3"],{

/***/ "./m3.js":
/*!***************!*\
  !*** ./m3.js ***!
  \***************/
/*! exports provided: formatMoney, addFloat, distanceFormat, formatDate, getCountDate, getMonthEnd, getMonthDate, getTheWeek, formatEllipsis, formatBankFour, formatBankSensitive, formatPhoneSensitive, formatNumberPercent, formatName, formatBankShow, isFunction, isObject, isArray, isEmptyObject, formatMoneyInput, formatPhoneInput, formatBankCardInput, getVendorPrefix, getTranslateInfo, getQueryString, extend, photoCompress, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatMoney\", function() { return formatMoney; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addFloat\", function() { return addFloat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distanceFormat\", function() { return distanceFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatDate\", function() { return formatDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCountDate\", function() { return getCountDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMonthEnd\", function() { return getMonthEnd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getMonthDate\", function() { return getMonthDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTheWeek\", function() { return getTheWeek; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatEllipsis\", function() { return formatEllipsis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatBankFour\", function() { return formatBankFour; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatBankSensitive\", function() { return formatBankSensitive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatPhoneSensitive\", function() { return formatPhoneSensitive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatNumberPercent\", function() { return formatNumberPercent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatName\", function() { return formatName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatBankShow\", function() { return formatBankShow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isFunction\", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isObject\", function() { return isObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isArray\", function() { return isArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isEmptyObject\", function() { return isEmptyObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatMoneyInput\", function() { return formatMoneyInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatPhoneInput\", function() { return formatPhoneInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formatBankCardInput\", function() { return formatBankCardInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getVendorPrefix\", function() { return getVendorPrefix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTranslateInfo\", function() { return getTranslateInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getQueryString\", function() { return getQueryString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extend\", function() { return extend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"photoCompress\", function() { return photoCompress; });\n\r\n\r\n/*\r\n* Number处理\r\n* */\r\n\r\n// 金额格式化(千分符)\r\nfunction formatMoney(Number, n) {\r\n  const _this = parseFloat(Number);\r\n  const dot = n === 0;\r\n  n = n > 0 && n <= 20 ? n : 2;\r\n  const formatMoneyDate = `${parseFloat((`${_this}`).replace(/[^\\d.-]/g, '')).toFixed(n)}`;\r\n  const l = formatMoneyDate.split('.')[0].split('').reverse(); const\r\n      r = formatMoneyDate.split('.')[1];\r\n  let t = '';\r\n  for (let i = 0; i < l.length; i += 1) {\r\n    t += l[i] + ((i + 1) % 3 === 0 && (i + 1) !== l.length ? ',' : '');\r\n  }\r\n  return t.split('').reverse().join('') + (dot ? '' : (`.${r}`));\r\n}\r\n// 浮点数相加\r\nfunction addFloat(number1, number2) {\r\n  return (parseFloat(number1) * 10000000000 + parseFloat(number2) * 10000000000) / 10000000000;\r\n}\r\n// 距离格式化\r\nfunction distanceFormat(distance) {\r\n  distance = parseFloat(distance);\r\n  if (!distance) return '';\r\n  return distance > 999 ? `${(distance / 1000).toFixed(2)}km` : `${distance}m`;\r\n}\r\n\r\n\r\n/*\r\n* 时间格式化\r\n* */\r\nfunction formatDate(date, fmt) {\r\n  const o = {\r\n    'M+': date.getMonth() + 1, // 月份\r\n    'd+': date.getDate(), // 日\r\n    'h+': date.getHours(), // 小时\r\n    'm+': date.getMinutes(), // 分\r\n    's+': date.getSeconds(), // 秒\r\n    'q+': Math.floor((date.getMonth() + 3) / 3), // 季度\r\n    S: date.getMilliseconds(), // 毫秒\r\n  };\r\n  if (/(y+)/.test(fmt)) {\r\n    fmt = fmt.replace(RegExp.$1, (`${date.getFullYear()}`).substr(4 - RegExp.$1.length));\r\n  }\r\n  for (const k in o) {\r\n    if (new RegExp(`(${k})`).test(fmt)) {\r\n      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : ((`00${o[k]}`).substr((`${o[k]}`).length)));\r\n    }\r\n  }\r\n  return fmt;\r\n}\r\n// 得到某天的前天，后天\r\nfunction getCountDate(date, num) {\r\n  return new Date(date.setDate(date.getDate() + num)).format('yyyy-MM-dd');\r\n}\r\n// 某月最后一天\r\nfunction getMonthEnd(date) {\r\n  return new Date(date.getFullYear(), date.getMonth() + 1).toJSON().substring(0, 10);\r\n}\r\n// 某月多少天\r\nfunction getMonthDate(date) {\r\n  const curMonth = date.getMonth();\r\n  date.setMonth(curMonth + 1);\r\n  date.setDate(0);\r\n  return date.getDate();\r\n}\r\n// 某日是某年的第几周\r\nfunction getTheWeek(now) {\r\n  let totalDays = 0;\r\n  let years = now.getFullYear();\r\n  if (years < 1000) years += 1900;\r\n  const days = new Array(12);\r\n  days[0] = 31;\r\n  days[2] = 31;\r\n  days[3] = 30;\r\n  days[4] = 31;\r\n  days[5] = 30;\r\n  days[6] = 31;\r\n  days[7] = 31;\r\n  days[8] = 30;\r\n  days[9] = 31;\r\n  days[10] = 30;\r\n  days[11] = 31;\r\n\r\n  // 判断是否为闰年，针对2月的天数进行计算\r\n  if (Math.round(now.getYear() / 4) === now.getYear() / 4) {\r\n    days[1] = 29;\r\n  } else {\r\n    days[1] = 28;\r\n  }\r\n\r\n  if (now.getMonth() === 0) {\r\n    totalDays += now.getDate();\r\n  } else {\r\n    const curMonth = now.getMonth();\r\n    for (let count = 1; count <= curMonth; count += 1) {\r\n      totalDays += days[count - 1];\r\n    }\r\n    totalDays += now.getDate();\r\n  }\r\n  // 得到第几周\r\n  const week = Math.ceil(totalDays / 7);\r\n  return week;\r\n}\r\n\r\n/*\r\n* String 处理\r\n* */\r\n// 字符串超出点\r\nfunction formatEllipsis(obj, length) {\r\n  if (!obj) return '';\r\n  return obj.length > length ? obj.slice(length) : obj;\r\n}\r\n// 去敏处理\r\nfunction formatBankFour(str) { // 银行卡后四位\r\n  return str.substr(str.length - 4);\r\n}\r\nfunction formatBankSensitive(str) { // 银行卡\r\n  return str.substr(0, 4) + '*'.repeat(str.length - 8) + str.substr(str.length - 4);\r\n}\r\nfunction formatPhoneSensitive(str) {\r\n  return str.substr(0, 3) + '*'.repeat(str.length - 7) + str.substr(str.length - 4);\r\n}\r\n// 添加百分号\r\nfunction formatNumberPercent(str) {\r\n  return `${str * 1000000000 / 10000000}%`;\r\n}\r\n// 名字掩码\r\nfunction formatName(str) {\r\n  return str.substr(0, 1) + '*'.repeat(str.length - 1);\r\n}\r\n// 银行卡格式化\r\nfunction formatBankShow(card) {\r\n  card += '';\r\n  if (card.length < 1) return '';\r\n  if (card.length > 0 && card.length < 5) return card;\r\n  if (card.length > 4) {\r\n    return `${card.slice(0, 4)} ${formatBankCard(card.slice(4))}`;\r\n  }\r\n  return '';\r\n}\r\n\r\n\r\n/*\r\n* 类型判断\r\n* */\r\nconst _ARRAY_NAME = '[object Array]';\r\nconst _OBJECT_NAME = '[object Object]';\r\nconst _FUNCTION_NAME = '[object Function]';\r\n// 得到对象类型\r\nfunction _isType(obj) {\r\n  return Object.prototype.toString.call(obj);\r\n}\r\nfunction isFunction(obj) {\r\n  return _isType(obj) === _FUNCTION_NAME;\r\n}\r\nfunction isObject(obj) {\r\n  return _isType(obj) === _OBJECT_NAME;\r\n}\r\nfunction isArray(obj) {\r\n  return _isType(obj) === _ARRAY_NAME;\r\n}\r\nfunction isEmptyObject(obj) { // 是否是空对象\r\n  for (const t in obj) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/*\r\n* input 输入限制\r\n* */\r\n\r\n// 处理金额限制\r\nfunction formatMoneyInput(value, n) {\r\n  n = n || 2;\r\n  if (value.match(/^0\\d/)) value = value.slice(1);\r\n  if (n === 0) value = value.replace(/\\./g, '');\r\n  if (value.match(/[^\\d.]/g)) return value.replace(/[^\\d.]/g, '');\r\n  if (value.match(/^\\./)) return '0.';\r\n  const values = value.split('.');\r\n  if ((values.length === 2 && values[1].length > 2) || values.length === 3) return `${values[0]}.${values[1].substr(0, 2)}`;\r\n  return value;\r\n}\r\n\r\n// 手机号限制\r\nfunction formatPhoneInput(value) {\r\n  value = value.replace(/^\\d/g, '');\r\n  // iphone联系人复制出现问题\r\n  const val = value.split('');\r\n  value = val.filter((item) => {\r\n    if (item && item !== '') {\r\n      return item;\r\n    }\r\n    return false;\r\n  });\r\n  return value;\r\n}\r\n\r\n// 移除表情\r\n// value.replace(/\\uD83C[\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDE4F]/g,'');\r\n\r\n// 银行卡限制\r\nfunction formatBankCardInput(card) {\r\n  card = card.replace(/[^\\d\\w]/g, '');\r\n  card += '';\r\n  if (card.length < 1) return '';\r\n  if (card.length > 0 && card.length < 5) return card;\r\n  if (card.length > 4) {\r\n    return `${card.slice(0, 4)} ${formatBankCardInput(card.slice(4))}`;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n* HTML 属性\r\n* */\r\n// 获取当前css浏览器前缀\r\nfunction getVendorPrefix() {\r\n  const body = document.body || document.documentElement;\r\n\r\n\r\n  const styles = body.style;\r\n\r\n\r\n  const vendor = ['webkit', 'khtml', 'moz', 'ms', 'o'];\r\n\r\n\r\n  let i = 0;\r\n  while (i < vendor.length) {\r\n    if (typeof styles[`${vendor[i]}Transition`] === 'string') {\r\n      return vendor[i];\r\n    }\r\n    i += 1;\r\n  }\r\n}\r\n\r\n// 获取 translate 坐标\r\nfunction getTranslateInfo(t) {\r\n  const reg = /translate\\((.+)px?,(.+)px?\\)/;\r\n  const rst = reg.exec(t);\r\n  if (rst) {\r\n    return {\r\n      x: parseFloat(rst[1]),\r\n      y: parseFloat(rst[2]),\r\n    };\r\n  }\r\n  return {\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n}\r\n\r\n// 获取查询字段\r\nfunction getQueryString(name) {\r\n  const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`, 'i');\r\n  const r = window\r\n      .location\r\n      .search\r\n      .substr(1)\r\n      .match(reg);\r\n  if (r != null) {\r\n    return unescape(r[2]);\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\n// 深扩展\r\nfunction _extend(target, source) {\r\n  if (_isType(source) === _ARRAY_NAME) {\r\n    for (let i = 0; i < source.length; i += 1) {\r\n      if (_isType(source[i]) === _ARRAY_NAME) {\r\n        target[i] = source[i].concat(target[i] ? target[i] : []);\r\n        _extend(target[i], source[i]);\r\n      } else if (_isType(source[i]) === _OBJECT_NAME) {\r\n        target[i] = target[i] ? target[i] : {};\r\n        _extend(target[i], source[i]);\r\n      } else {\r\n        target[i] = source[i];\r\n      }\r\n    }\r\n  } else {\r\n    for (const v in source) {\r\n      if (_isType(source[v]) === _ARRAY_NAME) {\r\n        target[v] = source[v].concat(target[v] ? target[v] : []);\r\n        _extend(target[v], source[v]);\r\n      } else if (_isType(source[v]) === _OBJECT_NAME) {\r\n        target[v] = target[v] ? target[v] : {};\r\n        _extend(target[v], source[v]);\r\n      } else {\r\n        target[v] = source[v];\r\n      }\r\n    }\r\n  }\r\n  return target;\r\n}\r\nfunction extend(target) {\r\n  let targets; const\r\n      arg = Array.from(arguments).slice(1, arguments.length);\r\n  if (arg.length > 0) {\r\n    targets = _extend(target, arg[0]);\r\n  }\r\n  if (arg.length > 1) {\r\n    return extend(targets, arg[1]);\r\n  }\r\n  return targets;\r\n}\r\n\r\n\r\nfunction _convertBase64UrlToBlob(urlData) {\r\n  const arr = urlData.split(','); const mime = arr[0].match(/:(.*?);/)[1];\r\n  const bstr = atob(arr[1]); let n = bstr.length;\r\n  const u8arr = new Uint8Array(n);\r\n  while (n) {\r\n    u8arr[n] = bstr.charCodeAt(n);\r\n    n -= 1;\r\n  }\r\n  return new Blob([u8arr], { type: mime });\r\n}\r\nfunction _rotateImg(img, direction, canvas) {\r\n  // alert(img);\r\n  // 最小与最大旋转方向，图片旋转4次后回到原方向\r\n  const minStep = 0;\r\n  const maxStep = 3;\r\n  // var img = document.getElementById(pid);\r\n  if (img == null) return;\r\n  // img的高度和宽度不能在img元素隐藏后获取，否则会出错\r\n  const { height, width } = img;\r\n  // var step = img.getAttribute('step');\r\n  let step = 2;\r\n  if (step == null) {\r\n    step = minStep;\r\n  }\r\n  if (direction === 'right') {\r\n    step += 1;\r\n    // 旋转到原位置，即超过最大值\r\n    if (step > maxStep) {\r\n      step = minStep;\r\n    }\r\n  } else {\r\n    step -= 1;\r\n    if (step < minStep) {\r\n      step = maxStep;\r\n    }\r\n  }\r\n  // img.setAttribute('step', step);\r\n  /* var canvas = document.getElementById('pic_' + pid);\r\n  if (canvas == null) {\r\n      img.style.display = 'none';\r\n      canvas = document.createElement('canvas');\r\n      canvas.setAttribute('id', 'pic_' + pid);\r\n      img.parentNode.appendChild(canvas);\r\n  }  */\r\n  // 旋转角度以弧度值为参数\r\n  const degree = step * 90 * Math.PI / 180;\r\n  const ctx = canvas.getContext('2d');\r\n  switch (step) {\r\n    case 0:\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      ctx.drawImage(img, 0, 0);\r\n      break;\r\n    case 1:\r\n      canvas.width = height;\r\n      canvas.height = width;\r\n      ctx.rotate(degree);\r\n      ctx.drawImage(img, 0, -height);\r\n      break;\r\n    case 2:\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      ctx.rotate(degree);\r\n      ctx.drawImage(img, -width, -height);\r\n      break;\r\n    case 3:\r\n      canvas.width = height;\r\n      canvas.height = width;\r\n      ctx.rotate(degree);\r\n      ctx.drawImage(img, -width, 0);\r\n      break;\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n/*\r\n* 图片压缩返回blob对象\r\n* */\r\nfunction photoCompress(file, objDiv) {\r\n  let Orientation;\r\n  function _canvasDataURL(path, data, callback) {\r\n    const img = new Image();\r\n    img.src = path;\r\n    img.onload = function () {\r\n      const that = this;\r\n      // 默认按比例压缩\r\n      let w = that.width;\r\n\r\n\r\n      let h = that.height;\r\n\r\n\r\n      const scale = w / h;\r\n      // w = obj.width || w;\r\n      // h = obj.height || (w / scale);\r\n      if (w > 1440 || h > 1440) {\r\n        if (w > h) {\r\n          w = 1440;\r\n          h = (w / scale);\r\n        } else {\r\n          h = 1440;\r\n          w = h * scale;\r\n        }\r\n      } else {\r\n        callback(data);\r\n        return;\r\n      }\r\n      const quality = 0.8; // 默认图片质量为0.7\r\n      // 生成canvas\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      // 创建属性节点\r\n      const anw = document.createAttribute('width');\r\n      anw.nodeValue = w;\r\n      const anh = document.createAttribute('height');\r\n      anh.nodeValue = h;\r\n      canvas.setAttributeNode(anw);\r\n      canvas.setAttributeNode(anh);\r\n      ctx.drawImage(that, 0, 0, w, h);\r\n      // 图像质量\r\n      // quality值越小，所绘制出的图像越模糊\r\n      // var base64 = canvas.toDataURL('image/jpeg', quality);\r\n\r\n      let base64 = null;\r\n      if (Orientation !== '' && Orientation !== 1) {\r\n        switch (Orientation) {\r\n          case 6:\r\n            _rotateImg(this, 'left', canvas);\r\n            break;\r\n          case 8:\r\n            _rotateImg(this, 'right', canvas);\r\n            break;\r\n          case 3:\r\n            // TODO 未生效\r\n            _rotateImg(this, 'right', canvas);\r\n            _rotateImg(this, 'right', canvas);\r\n            break;\r\n          default:\r\n            return '';\r\n        }\r\n      }\r\n      base64 = canvas.toDataURL('image/jpeg', quality);\r\n\r\n      // 回调函数返回base64的值\r\n      callback(_convertBase64UrlToBlob(base64));\r\n    };\r\n  }\r\n  EXIF.getData(file, function () {\r\n    EXIF.getAllTags(this);\r\n    Orientation = EXIF.getTag(this, 'Orientation');\r\n  });\r\n\r\n  const ready = new FileReader();\r\n  /* 开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值\r\n  会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容. */\r\n  ready.readAsDataURL(file);\r\n  ready.onload = function () {\r\n    const re = this.result;\r\n    _canvasDataURL(re, file, objDiv);\r\n  };\r\n}\r\n\r\nconst testsd = function () {\r\n\r\n  class Event {\r\n    constructor() {\r\n      this.handlers = [];\r\n    }\r\n    on(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: false });\r\n    }\r\n    one(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: true });\r\n    }\r\n    emit(type, option, fn) {\r\n      const handlers = this.handlers[type];\r\n      for (let i = 0; i < handlers.length; i += 1) {\r\n        if (fn) {\r\n          if (handlers[i].handle === fn) {\r\n            handlers[i].handle(option);\r\n            if (handlers[i].one) {\r\n              handlers.splice(i, 1);\r\n            }\r\n            break;\r\n          }\r\n        } else {\r\n          handlers[i].handle(option);\r\n          if (handlers[i].one) {\r\n            handlers.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    remove(type, fn) {\r\n      const handlers = this.handlers[type];\r\n      if (fn) {\r\n        for (let i = 0; i < handlers.length; i += 1) {\r\n          if (handlers[i] === fn) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        delete this.handlers[type];\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\nconst test3sd = function () {\r\n\r\n  class Event {\r\n    constructor() {\r\n      this.handlers = [];\r\n    }\r\n    on(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: false });\r\n    }\r\n    one(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: true });\r\n    }\r\n    emit(type, option, fn) {\r\n      const handlers = this.handlers[type];\r\n      for (let i = 0; i < handlers.length; i += 1) {\r\n        if (fn) {\r\n          if (handlers[i].handle === fn) {\r\n            handlers[i].handle(option);\r\n            if (handlers[i].one) {\r\n              handlers.splice(i, 1);\r\n            }\r\n            break;\r\n          }\r\n        } else {\r\n          handlers[i].handle(option);\r\n          if (handlers[i].one) {\r\n            handlers.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    remove(type, fn) {\r\n      const handlers = this.handlers[type];\r\n      if (fn) {\r\n        for (let i = 0; i < handlers.length; i += 1) {\r\n          if (handlers[i] === fn) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        delete this.handlers[type];\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\nconst tes4tsd = function () {\r\n\r\n  class Event {\r\n    constructor() {\r\n      this.handlers = [];\r\n    }\r\n    on(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: false });\r\n    }\r\n    one(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: true });\r\n    }\r\n    emit(type, option, fn) {\r\n      const handlers = this.handlers[type];\r\n      for (let i = 0; i < handlers.length; i += 1) {\r\n        if (fn) {\r\n          if (handlers[i].handle === fn) {\r\n            handlers[i].handle(option);\r\n            if (handlers[i].one) {\r\n              handlers.splice(i, 1);\r\n            }\r\n            break;\r\n          }\r\n        } else {\r\n          handlers[i].handle(option);\r\n          if (handlers[i].one) {\r\n            handlers.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    remove(type, fn) {\r\n      const handlers = this.handlers[type];\r\n      if (fn) {\r\n        for (let i = 0; i < handlers.length; i += 1) {\r\n          if (handlers[i] === fn) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        delete this.handlers[type];\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\nconst te3st3ererersd = function () {\r\n\r\n  class Event {\r\n    constructor() {\r\n      this.handlers = [];\r\n    }\r\n    on(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: false });\r\n    }\r\n    one(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: true });\r\n    }\r\n    emit(type, option, fn) {\r\n      const handlers = this.handlers[type];\r\n      for (let i = 0; i < handlers.length; i += 1) {\r\n        if (fn) {\r\n          if (handlers[i].handle === fn) {\r\n            handlers[i].handle(option);\r\n            if (handlers[i].one) {\r\n              handlers.splice(i, 1);\r\n            }\r\n            break;\r\n          }\r\n        } else {\r\n          handlers[i].handle(option);\r\n          if (handlers[i].one) {\r\n            handlers.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    remove(type, fn) {\r\n      const handlers = this.handlers[type];\r\n      if (fn) {\r\n        for (let i = 0; i < handlers.length; i += 1) {\r\n          if (handlers[i] === fn) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        delete this.handlers[type];\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\nconst te3stererere3sd = function () {\r\n\r\n  class Event {\r\n    constructor() {\r\n      this.handlers = [];\r\n    }\r\n    on(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: false });\r\n    }\r\n    one(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: true });\r\n    }\r\n    emit(type, option, fn) {\r\n      const handlers = this.handlers[type];\r\n      for (let i = 0; i < handlers.length; i += 1) {\r\n        if (fn) {\r\n          if (handlers[i].handle === fn) {\r\n            handlers[i].handle(option);\r\n            if (handlers[i].one) {\r\n              handlers.splice(i, 1);\r\n            }\r\n            break;\r\n          }\r\n        } else {\r\n          handlers[i].handle(option);\r\n          if (handlers[i].one) {\r\n            handlers.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    remove(type, fn) {\r\n      const handlers = this.handlers[type];\r\n      if (fn) {\r\n        for (let i = 0; i < handlers.length; i += 1) {\r\n          if (handlers[i] === fn) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        delete this.handlers[type];\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\nconst te3sererert3sd = function () {\r\n\r\n  class Event {\r\n    constructor() {\r\n      this.handlers = [];\r\n    }\r\n    on(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: false });\r\n    }\r\n    one(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: true });\r\n    }\r\n    emit(type, option, fn) {\r\n      const handlers = this.handlers[type];\r\n      for (let i = 0; i < handlers.length; i += 1) {\r\n        if (fn) {\r\n          if (handlers[i].handle === fn) {\r\n            handlers[i].handle(option);\r\n            if (handlers[i].one) {\r\n              handlers.splice(i, 1);\r\n            }\r\n            break;\r\n          }\r\n        } else {\r\n          handlers[i].handle(option);\r\n          if (handlers[i].one) {\r\n            handlers.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    remove(type, fn) {\r\n      const handlers = this.handlers[type];\r\n      if (fn) {\r\n        for (let i = 0; i < handlers.length; i += 1) {\r\n          if (handlers[i] === fn) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        delete this.handlers[type];\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\nconst eertert = function () {\r\n\r\n  class Event {\r\n    constructor() {\r\n      this.handlers = [];\r\n    }\r\n    on(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: false });\r\n    }\r\n    one(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: true });\r\n    }\r\n    emit(type, option, fn) {\r\n      const handlers = this.handlers[type];\r\n      for (let i = 0; i < handlers.length; i += 1) {\r\n        if (fn) {\r\n          if (handlers[i].handle === fn) {\r\n            handlers[i].handle(option);\r\n            if (handlers[i].one) {\r\n              handlers.splice(i, 1);\r\n            }\r\n            break;\r\n          }\r\n        } else {\r\n          handlers[i].handle(option);\r\n          if (handlers[i].one) {\r\n            handlers.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    remove(type, fn) {\r\n      const handlers = this.handlers[type];\r\n      if (fn) {\r\n        for (let i = 0; i < handlers.length; i += 1) {\r\n          if (handlers[i] === fn) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        delete this.handlers[type];\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\nconst te3sterte3sd = function () {\r\n\r\n  class Event {\r\n    constructor() {\r\n      this.handlers = [];\r\n    }\r\n    on(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: false });\r\n    }\r\n    one(type, fn) {\r\n      if (!this.handlers[type]) {\r\n        this.handlers[type] = [];\r\n      }\r\n      this.handlers[type].push({ handle: fn, one: true });\r\n    }\r\n    emit(type, option, fn) {\r\n      const handlers = this.handlers[type];\r\n      for (let i = 0; i < handlers.length; i += 1) {\r\n        if (fn) {\r\n          if (handlers[i].handle === fn) {\r\n            handlers[i].handle(option);\r\n            if (handlers[i].one) {\r\n              handlers.splice(i, 1);\r\n            }\r\n            break;\r\n          }\r\n        } else {\r\n          handlers[i].handle(option);\r\n          if (handlers[i].one) {\r\n            handlers.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    remove(type, fn) {\r\n      const handlers = this.handlers[type];\r\n      if (fn) {\r\n        for (let i = 0; i < handlers.length; i += 1) {\r\n          if (handlers[i] === fn) {\r\n            handlers.splice(i, 1);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        delete this.handlers[type];\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n  b:3\r\n});\r\n\n\n//# sourceURL=webpack:///./m3.js?");

/***/ })

}]);